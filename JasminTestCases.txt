Testing:- 

Types of testing:
	1) Isolated : unit testing creating every dependent functionalty as mock 
	2) Intergarion : unit testing also verify dependent functionalty
	3) Automation : Selenium
	4) End to End : Protactor
 

Angular Jasmin Testing : https://stackblitz.com/edit/angular-testing

>>>ng test

karma.conf.js: 
{
	port: 9876, // port in which testcase run
	autoWatch: false/true, // run automatically on save changes
	browsers: ['ChromeHeadless']/['Chrome']
	signleRun: true/false // to run single or multiple times 
} 



**************** Basic : **************** 

1) describe : The describe(string, function) function defines what we call a Test Suite, a collection of individual Test Specs.

	describe('Hello world', () => {
 
	});

2) it:  The it(string, function) function defines an individual Test Spec, this contains one or more Test Expectations.

	describe('Hello world', () => {
  		it('says hello', () => { 
    			
  		});
	});

3) expect: The expect(actual) expression is what we call an Expectation. In conjunction with a Matcher it describes an expected piece of behaviour in the application.

	describe('Hello world', () => {
  		it('says hello', () => { 
    			expect(helloWorld())
  		});
	});
	
4) The matcher(expected) expression is what we call a Matcher. It does a boolean comparison with the expected value passed in vs. the actual value passed to the expect function, if they are false the spec fails.

	describe('Hello world', () => {
  		it('says hello', () => { 
    			expect(helloWorld()).toEqual('Hello world!');  
  		});
	});

_________________________________________________________________________________

**************** Built-in matchers : ****************

expect(array).toContain(member);
expect(fn).toThrow(string);
expect(fn).toThrowError(string);
expect(instance).toBe(instance);
expect(mixed).toBeDefined();
expect(mixed).toBeFalsy();
expect(mixed).toBeNull();
expect(mixed).toBeTruthy();
expect(mixed).toBeUndefined();
expect(mixed).toEqual(mixed);
expect(mixed).toMatch(pattern);
expect(number).toBeCloseTo(number, decimalPlaces);
expect(number).toBeGreaterThan(number);
expect(number).toBeLessThan(number);
expect(number).toBeNaN();
expect(spy).toHaveBeenCalled();
expect(spy).toHaveBeenCalledTimes(number);
expect(spy).toHaveBeenCalledWith(...arguments);

________________________________________________________________________

**************** Setup and teardown ****************

Sometimes in order to test a feature we need to perform some setup, perhaps itâ€™s creating some test objects. Also we may need to perform some cleanup activities after we have finished testing, perhaps we need to delete some files from the hard drive.

1) beforeAll : -
	This function is called once, before all the specs in describe test suite are run.

	describe('HeroesService', () => {
		beforeAll(() => {
    			localStorage.clear();
    		});
	});

2) afterAll : -
	This function is called once after all the specs in a test suite are finished.

	describe('HeroesService', () => {
		afterAll(() => {
    			localStorage.clear();
    		});
	});

3) beforeEach :- 
	This function is called before each test specification, it function, has been run.

	describe('HeroesService', () => {
  		let httpClient: HttpClient;
  		let httpTestingController: HttpTestingController;
  		let heroService: HeroesService;

  		beforeEach(() => {
    			TestBed.configureTestingModule({
      				// Import the HttpClient mocking services
      				imports: [ HttpClientTestingModule ],
      			// Provide the service-under-test and its dependencies
      				providers: [
        				HeroesService,
        				HttpErrorHandler,
        				MessageService
      					]
    			});
		});
	});

4) afterEach:
	This function is called after each test specification has been run.

	afterEach(() => {
    	// After every test, assert that there are no more pending requests.
    		httpTestingController.verify();
  	});
__________________________________________________________________________________

**************** Disabled and focused tests ****************

1) Disabled test cases
	xdescribe()

2) Focused test cases
	fdescribe()

_________________________________________________________________________________

**************** TestBed: **************** 
	1) To configure a module for the testing environment. 
	2) The TestBed creates a dynamically-constructed Angular test module that emulates an Angular @NgModule.

ConfigureTestingModule: configure testing module for required dependency
 
	beforeEach(() => {

    			TestBed.configureTestingModule({

      				// Import the HttpClient mocking services
      				imports: [ HttpClientTestingModule ],

      			// Provide the service-under-test and its dependencies
      				providers: [
        				HeroesService,
        				HttpErrorHandler,
        				MessageService
      					]
    			});
		});

Note:- All the dependency required for any service, component or directive need to configure in  TestBed.configureTestingModule({}), also verify dependencies dependency are also added in dependency. 

__________________________________________________________________________________

**************** AAA pattern ****************
Arrange
Act
Assert

it("should", ()=>{
	object.a= false; // Arrange
	object.a = true; // Act
	expect(object.a).toBe(true); // Assert
})
__________________________________________________________________________________

Imports for testing mostly used:
	
import { async, ComponentFixture, TestBed, getTestBed } from '@angular/core/testing';

import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
__________________________________________________________________________________

**************** Testing service ****************

	service: HerosService
	
	@Injectable()
	export class HerosService {
		constructor(){}
		addition(a,b) {
			return a+b;
		}

		substraction(a,b) {
			return a-b;
		}
	}

Spec:-

	//Testbed.get(HerosService); get service instance 

	describe('HeroesService', () => {
		const herosService: HerosService;
  		beforeEach(() => {
			herosService = Testbed.get(HerosService);	
		})

		it("should", ()=>{
			let c= 10;
			let d= 20;
			const mockTotal = 30;
			expect(herosService.add(c, d)).toEqual(mockTotal);
		})		
	});

----------------------------------------------------------------------------------
Mocking function is called: if we dont want to test actual call of function then we can create a spy of that function 

const spyFunction = spyOn(<object>, '<function_name>');

expect(spyFunction).haveBeenCalled();


----------------------------------------------------------------------------------

Mocking function return:- mocking function return so that testing functionality doenst dependent on other function called in it.

const spyCallBack = spyOn(Object, '<function_Name>').and.returnValue(of(<value>))

	@Injectable()
	export class Math {
		constructor(){}
		addition(a,b) {
			return a+b;
		}
	}
			/***/
	@Injectable()
	export class HerosService {
		constructor(private math: Math){}
		totalPower(hero1, hero2) {
			return (math.addtion(hero1.power, hero2.power));
		}
	}

Spec:-

	describe('HeroesService', () => {
		const herosService: HerosService;
		const math: Math;
  		beforeEach(() => {
			TestBed.configureTestingModule({
      				providers: [Math]
    			});
			math = Testbed.get(Math);
			herosService = Testbed.get(HerosService);	
		})

		it("should", ()=>{
<imp>			const spyCallBack = spyOn(math, 'addition').and.returnValue(of(30))
			let c= 10;
			let d= 20;
			const mockTotal = 30;
			expect(herosService.totalPower(c, d)).toEqual(mockTotal);
		})		
	});

Alternate spec:-

	//useValue: replace provide object with used value for it.

	describe('HeroesService', () => {
		const herosService: HerosService;

<imp>		const mathStub: { addition: jasmine.createSpy('addition').and.returnValue(30)};

  		beforeEach(() => {
			TestBed.configureTestingModule({
<imp>      			providers: [{provide: Math, useValue: mathStub}]
    			});
			math = Testbed.get(Math);
			herosService = Testbed.get(HerosService);	
		})


__________________________________________________________________________________

Testing Pipe: 
	it("should", ()=>{
		let upperCasePipe = new UpperCasePipe();
		expect(upperCasePipe.transform('hello')).toEqual('HELLO');
	})

__________________________________________________________________________________

Testing Callback:

	lockBack(value, callbackFun) {
		value = value + 1;
		callbackFun(value);
	}

	tookBack(value, (response) => {
		this.response = response;
	})

spec: 
	//create a dummy object with a mock function in it which will be mock of callback function which we are testing.

	it("should lockBack", ()=>{
		let mockCallbackObj = {
			mockCallback: () => {
			}
		}
		
		let spyCallBack = spyOn(mockCallbackObj, 'mockCallback');

		service.lockBack(1, mockCallbackObj.mockCallback);
		expect(spyCallBack).HaveBeenCalled()
	})

	it("should tookBack", ()=>{
		let mockCallbackObj = {
			mockCallback: (response) => {
				expect(response.prop).toEqual(1);
			}
		}
		
		spyOn(mockCallbackObj, 'mockCallback').and.returnValue({prop:1});

		service.lockBack(1, mockCallbackObj.mockCallback);
	})

__________________________________________________________________________________

Testing Component:

  describe('Component', () => {
    let component: Component;
<imp>
    let fixture: ComponentFixture<Component>;// to store component instance
  
    beforeEach(async(() => {
      TestBed.configureTestingModule({
        declarations: [Component],
        schemas: [NO_ERRORS_SCHEMA]
      }).compileComponents(); // This is not needed if you are in the CLI context
    }));

<imp>

    beforeEach(() => {
     // creating instance of the component below are the basic steps
     fixture = TestBed.createComponent(Comptonent);
     component = fixture.componentInstance;
     fixture.detectChanges(); // applying change change detection strategy
     // if making any change in component then call this else if you are testing changes on UI will not be reflected
   });

   it('should instantiate', () => {
      expect(component).toBeDefined();
   });
 });

While configureTestingModule need to add all the dependency (component, directive , service , pipe & module). In case it is also needed to add dependences dependency.
__________________________________________________________________________________

************************Mocking service in component*************************
service
export class BootService {
	vega() {
		let object = { mono : 123};
		return object;
	}
	
	mario() {
		let jump = { speed : congfig.speed };
	}
	
	fire() {
		bootfire();
	}
}

Component Spec : - creating mock of service function

Global mocking:-

describe('Component', () => {
	const mockObject = { mono : 123};
	const mockSpeed = = { speed : 25 }
	const mockBootService = { 
		vega: jasmine.createSpy('vega').and.returnValue(of(mockObject)),
		matio: jasmine.createSpy('mario').and.returnValue(of(mockSpeed)),
		fire: jasmine.createSpy('fire')
	};

     beforeEach(async(() => {
      TestBed.configureTestingModule({
        declarations: [Component],
<imp>   providers: [{ provide: BootService, useValue: mockBootService}],
      }).compileComponents(); // This is not needed if you are in the CLI context
    }));
})


when service function is called mocked function is called and return value assigned in returnValue(of(<value>));


Alternate for individual test:-

it('should', ()=>{
	const mockObject = { mono : 234};
	const bootService = TestBed.get(BootService);
	spyOn(bootservice, 'vega').and.returnValue(of(mockObject));

})

OR 

it('should', ()=>{
	const mockObject = { mono : 234};

	injector = getTestBed();
	const bootService = injector.get(BootService);

	spyOn(bootservice, 'vega').and.returnValue(of(mockObject));

})
	

__________________________________________________________________________________

Testing Directive :

	@Directive({
  		selector: '[dtCapitalize]'
	})
	export class CapitalizeDirective {
  		constructor(private el: ElementRef) { }

  		@HostListener('click')
  		onClick() {
    		   (this.el.nativeElement.style.textTransform === 'uppercase') 		    		   ?   this.el.nativeElement.style.textTransform = 'lowercase' 
		   :   this.el.nativeElement.style.textTransform = 'uppercase';
  		}

	}

Spec: 
	// create a test component and add your directive into its html element you  want to test
	@Component({
  		template: '<p dtCapitalize>Testing Directives is awesome!</p>'
	})
	class TestComponent {}

	describe('CapitalizeDirective', () => {
  		let component: TestComponent;
  		let fixture: ComponentFixture<TestComponent>;

  		beforeEach(() => {
    			TestBed.configureTestingModule({
      			  declarations: [
        			 TestComponent,
        			 CapitalizeDirective
   			  ]
    			});

    			fixture = TestBed.createComponent(TestComponent);
    			component = fixture.componentInstance;
  		});

  		it('should capitalize text when initially clicked', () => {
    		  const debugEl: HTMLElement = fixture.debugElement.nativeElement;
    		  const p: HTMLElement = debugEl.querySelector('p');

    		// change capitalize text
    		  p.click();
    		  fixture.detectChanges();

    		 // textTransform is the property that gets/sets text casing
    		  expect(p.style.textTransform).toBe('uppercase');
  		});

	});

__________________________________________________________________________________

Testing Custom Validation:

1) Validation using in Template driven form [(ngModel)]:

// Template driven form should only be used in small forms

@Directive({
  selector: '[ngModel][validEmail]',
  providers: [
    {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => EmailValidatorDirective),
      multi: true
    }
  ]
})
class EmailValidatorDirective implements Validator {

  validate(c: AbstractControl): { [key: string]: any } {
    if (c.value !== 'peeskillet@stackoverflow.com') {
      return { notPeeskillet: true };
    }
    return null;
  }
}

Spec:  

@Component({
  template: `
    <form>
      <input name="email" [ngModel]="email" validEmail />
    </form>
  `
})
class TestComponent {
  email;
}

describe('component: TestComponent', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FormsModule],
      declarations: [TestComponent, EmailValidatorDirective]
    });
  });

  it('should validate', async(() => {
    let fixture = TestBed.createComponent(TestComponent);
    let comp = fixture.componentInstance;
    let debug = fixture.debugElement;
    let input = debug.query(By.css('[name=email]'));

    fixture.detectChanges();
    fixture.whenStable().then(() => {
      input.nativeElement.value = 'bad@email.com';
      dispatchEvent(input.nativeElement, 'input');
      fixture.detectChanges();

      let form: NgForm = debug.children[0].injector.get(NgForm);
      let control = form.control.get('email');
      expect(control.hasError('notPeeskillet')).toBe(true);
      expect(form.control.valid).toEqual(false);
      expect(form.control.hasError('notPeeskillet', ['email'])).toEqual(true);

      input.nativeElement.value = 'peeskillet@stackoverflow.com';
      dispatchEvent(input.nativeElement, 'input');
      fixture.detectChanges();

      expect(control.hasError('notPeeskillet')).toBe(false);
      expect(form.control.valid).toEqual(true);
      expect(form.control.hasError('notPeeskillet', ['email'])).toEqual(false);
    });
  }));
});


2) Reactive Form: Best for testing and complex forms


evenValidate(control: FormControl):{[s:string]:boolean} {
    if(parseInt(control.value) % 2 !== 0 ) {
      return {notEvenNumber: true };
    } 
    return null;
  }

Spec: 

 it('should validate', () => {
   
    const control = new FormControl('2');
    expect(component.evenValidate(control)).toEqual(null);

    const control = new FormControl('1');
    expect(component.evenValidate(control)).toEqual({notEvenNumber: true });
  });

__________________________________________________________________________________

NO_ERRORS_SCHEMA : while Testing Ignore html unknown elements and properties 

Isolation of a component for shallow unit testing requires a large amount of boilerplate if your component is a container for many other components/services. One shortcut to having to import and mock at least first-level dependencies is to use NO_ERRORS_SCHEMA.

beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ yourcomponent ],
      schemas: [NO_ERRORS_SCHEMA]
    })
    .compileComponents();
  }));


https://medium.com/@fivedicephoto/why-you-shouldnt-use-no-errors-schema-in-angular-unit-tests-cdd478c30782

_______________________________________________________________________________

Mocking child Components :

If you dont want dependency of child component added in your component while testing , than create mock of those component and add them in dependency

PersonComponent: person.component.html
<app-child-1></app-child-1>
<app-child-2></app-child-2>

Spec: 
	@Component({
		selector: 'app-child-1'
  		template: '<p>Child 1</p>'
	})
	class Test1Component {}

	@Component({
		selector: 'app-child-2'
  		template: '<p>Child 2</p>'
	})
	class Test2Component {}


	beforeEach(async(() => {
      		TestBed.configureTestingModule({
        	declarations: [PersonComponent, Test1Component, Test2Component]
      		}).compileComponents();
    	}));

___________________________________________________________________________________

Testing HTTPClient:

 getUsers() {
    return this.http.get<User[]>(`https://api.github.com/users`);
  }

Spec: 

<imp> concepts
1) getTestBed(): getting the instance of service , some thing similiar to TestBed
2) HttpTestingController : Mocking http request
3) flush: Resolve the request by returning a body plus additional HTTP information
4) expectOne :  Expect that a single request has been made which matches the given URL, and return its mock.
5) expectNone : Expect that no requests have been made which match the given URL.

import { TestBed, getTestBed, inject } from '@angular/core/testing';
import {
  HttpClientTestingModule,
  HttpTestingController
} from '@angular/common/http/testing';

describe('GithubApiService', () => {
  let injector;
  let service: GithubApiService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [GithubApiService]
    });

    injector = getTestBed();
    service = injector.get(GithubApiService);
    httpMock = injector.get(HttpTestingController);
  });

  describe('#getUsers', () => {
    it('should return an Observable<User[]>', () => {
      const dummyUsers: User[] = [
        new User(0, 'John'),
        new User(1, 'Doe')
      ];

      service.getUsers().subscribe(users => {
        expect(users.length).toBe(2);
        expect(users).toEqual(dummyUsers);
      });

      const req = httpMock.expectOne(`https://api.github.com/users`);
      expect(req.request.method).toBe('GET');
      req.flush(dummyUsers);
    });
  });
});
__________________________________________________________________________________

spyOn(foo, 'bar').and.callThrough()

This will cause the actual method to be called. This is very straightforward when you have arguments that are passed by value such as a number.

http://www.ard.ninja/blog/jasmine-testing-spyonfoo-bar-callthrough-thoughts/
__________________________________________________________________________________

CanDeactivate:

export interface DeactivationGuarded {
  canDeactivate(nextState: string): boolean;
}

@Injectable()
export class CanDeactivateGuard implements CanDeactivate {
  canDeactivate(component: DeactivationGuarded):  boolean {
    return component.canDeactivate ? component.canDeactivate() : true;
  }
}

Spec:- 

it('should', () => {
const service: CanDeactivateService = TestBed.get(CanDeactivateService);

const mockCoponent = {
	canDeactivate() {
		return false;
	}
}

const mockroute = {} as ActivateRouteSnapshot;
const mockstate = {} as RouterStateSnapshot;

const response = service.canDeactivate(mockCoponent, mockroute, mockstate);

expect(response).toBe(false);
})
__________________________________________________________________________________

**************************** Testing Async ***************************

https://alligator.io/angular/testing-async-fakeasync/

1) whenStable:-
 
whenStable allows us to wait until all promises have been resolved to run our expectations.

component :

html :-

<h1<{{ title }}</h1>

  <button (click)="setTitle()" class="set-title">
    set title
  </button>

ts :-

setTitle() {
    new Promise(resolve => {
      resolve('One crazy app!');
    }).then((val: string) => {
      this.title = val;
    });
  }

spec: -

it('should display title', async(() => {
    debugElement
      .query(By.css('.set-title'))
      .triggerEventHandler('click', null);

    fixture.whenStable().then(() => {
      fixture.detectChanges();
      const value = debugElement.query(By.css('h1')).nativeElement.innerText;
      expect(value).toEqual('One crazy app!');
    });
  }));

2) FakeAsync :-

The problem with async is that we still have to introduce real waiting in our tests, and this can make our tests very slow. fakeAsync comes to the rescue and helps to test asynchronous code in a synchronous way. 

Component :

Html: -

<h1>
  {{ incrementDecrement.value }}
</h1>

<button (click)="increment()" class="increment">
  Increment
</button>

ts : -

increment() {
  setTimeout(() => {
    if (this.value < 15) {
      this.value += 1;
      this.message = '';
    } else {
      this.message = 'Maximum reached!';
    }
  }, 5000); // wait 5 seconds to increment the value
}

Spec :- 

import { TestBed, fakeAsync, tick, ComponentFixture } from '@angular/core/testing';


it('should increment in template after 5 seconds', fakeAsync(() => {
      debugElement
        .query(By.css('button.increment'))
        .triggerEventHandler('click', null);

      tick(2000);
      fixture.detectChanges();
      let value = debugElement.query(By.css('h1')).nativeElement.innerText;
      expect(value).toEqual('0'); // value should still be 0 after 2 seconds

      tick(3000);
      fixture.detectChanges();

      const value = debugElement.query(By.css('h1')).nativeElement.innerText;
      expect(value).toEqual('1'); // 3 seconds later, our value should now be 1
    }));
});

OR other then tick() best to use flush

It basically simulates the passage of time until the macrotask queue is empty. Macrotasks include things like setTimouts, setIntervals and 

it('should increment in template', fakeAsync(() => {
  debugElement
    .query(By.css('button.increment'))
    .triggerEventHandler('click', null);

  flush();
  fixture.detectChanges();

  const value = debugElement.query(By.css('h1')).nativeElement.innerText;
  expect(value).toEqual('1');
}));
__________________________________________________________________________________

Mocking property (spyOnProperty):

Service:
class CommonService {
	private counterValue = 0;
	get counter() {
		return counterValue++;
	}
} 

Service spec:
const commonService: CommonService = TestBed.get(CommonService);
spyOnProperty(commonService, 'counter', 'get').and.returnValue(2);
_________________________________________________________________________________

Form controls change value & control validation testing:

imp :
	1) fixture.whenStable().then() : async operation
	2) control.validator({} as AbstractControl); getting control validation
Component:
 this.feedbackForm.valueChanges.subscribe((value) => {
      this.updateValidation();
 });

Component spec:

component.feedbackForm.patchValue({ allowAdHocBeneficiaries: 1 });
    fixture.detectChanges();
    fixture.whenStable().then(() => {
      const validator = component.feedbackForm.get('email').validator({} as AbstractControl);
      expect(validator.required).toBeTruthy();
    });
__________________________________________________________________________________

Updating window object and testting :

  it('should set isMobile to false when screen width is greater then 768', () => {
    const componentFixture = TestBed.createComponent(BoxComponent);
    const componentInstance = componentFixture.componentInstance;
    Object.defineProperty(window, 'innerWidth', { writable: true, configurable: true, value: 1000 });
    componentFixture.detectChanges();
    expect(componentInstance.isMobile).toBeFalsy();
  });

__________________________________________________________________________________

Creating mock service while configuring

Spec:

class FakeDetailService {
  name:[] = ['momo','somo', lomo];
  getDetails() {
    return of(name);
  }
}

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      providers:
      { provide: DetailService, useClass: FakeDetailService }],
    })
      .compileComponents();
  }));

___________________________________________________________________________________

Calling observable subscriber (of()):

class RestService {
   getDetails(): Observable<[]> {
      return this.httpClient.get<[]>(this.detailsUrl);
   }
}

Spec: 
const mockNames = ['momo','somo', lomo];
const restService = TestBed.get(RestService);
spyOn(resrService, 'getDetails').and.returnValue(of(mockNames));

___________________________________________________________________________________

************************Some imp links************************* 
Reference links:

https://offering.solutions/blog/articles/2018/08/17/using-useclass-usefactory-usevalue-useexisting-with-treeshakable-providers-in-angular/#usevalue

https://github.com/joeeames/PSAngularUnitTestingCourse/tree/master/src/app

https://alligator.io/angular/testing-async-fakeasync/

http://tobyho.com/2011/12/15/jasmine-spy-cheatsheet/
